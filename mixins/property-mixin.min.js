var PropertyMixin=function(){"use strict";window.Backed=window.Backed||{},window.Backed.PropertyStore=window.Backed.PropertyStore||new Map;return e=>(class PropertyMixin extends e{static get observedAttributes(){return Object.entries(this.properties).map(e=>e[1].reflect?e[0]:null)}get properties(){return customElements.get(this.localName).properties}constructor(){if(super(),this.properties)for(const e of Object.entries(this.properties)){const{observer:t,reflect:r,renderer:i}=e[1];this.defineProperty(e[0],e[1])}}connectedCallback(){if(super.connectedCallback&&super.connectedCallback(),this.attributes)for(const e of this.attributes)if(String(e.name).includes("on-")){const t=e.value,r=e.name.replace("on-","");this.addEventListener(String(r),e=>{let r=e.path[0];for(;!r.host;)r=r.parentNode;r.host[t]&&r.host[t](e)})}}attributeChangedCallback(e,t,r){this[e]=r}defineProperty(e=null,{strict:t=!1,observer:r,reflect:i=!1,renderer:s,value:n}){Object.defineProperty(this,e,{set(t){if(t!==this[`___${e}`]&&(this[`___${e}`]=t,i&&(t?this.setAttribute(e,String(t)):this.removeAttribute(e)),r&&(r in this?this[r]():console.warn(`observer::${r} undefined`)),s)){const r={};r[e]=t,s in this?this.render(r,this[s]):console.warn(`renderer::${s} undefined`)}},get(){return this[`___${e}`]},configurable:!t});const o=this.getAttribute(e);this[e]=o||this.hasAttribute(e)||n}})}();